snippet controller
	<?php

	/*
	 * For the full copyright and license information, please view the LICENSE
	 * file that was distributed with this source code.
	 */

	use Symfony\Component\HttpFoundation\Response;
	use Symfony\Component\Security\Core\SecurityContext;
	use Symfony\Component\HttpFoundation\RedirectResponse;
	use Symfony\Bundle\FrameworkBundle\Controller\Controller;
	use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
	use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
	use Sensio\Bundle\FrameworkExtraBundle\Configuration\Template;

	/**
	 * ${1:Name} controller
	 *
	 */
	class ${1}Controller extends Controller
	{
		/**
		 * ${2:Action} action
		 *
		 * @Route("/${3}", name="${4}")
		 * @Template()
		 */
		public function ${2}Action()
		{
			${3}
		}

	}

snippet action
	/**
	 * ${1:Action} action
	 *
	 * @Route("/${2}", name="${3}")
	 * @Template()
	 */
	public function ${1}Action()
	{
		${4}
	}

snippet forward
	return $this->forward('${1:ApplicationCoreBundle}:${2:Controller}:${3:Action}');

snippet redirect
	return $this->redirect($this->get('router')->generate('${1:route}', 301);

snippet print_r
	print_r(${1}); exit;

snippet use
	use ${1:Foo\Bar\Baz};
	${2}

snippet	class
	${1:protected} class ${2:name}()
	{
		${3}
	}

snippet this
	$this->${1} = ${2};

snippet function
	function ${1:foo}(${2:array }${3:$bar})
	{
		${4}
	}

snippet service
	${1} = $this->get('${2}');

snippet gs
	public function get${1:Foo}()
	{
		return $this->${2:foo};
	}

	public function set$1($$2)
	{
		$this->$2 = $$2;
		return $this;
	}

snippet set 
	public function set${1:Foo}($${2:foo})
	{
		$this->${2} = $${2};

		return $this;
	}

snippet get
	public function get${1:Foo}()
	{
		return $this->${2:foo};
	}

snippet =?:
	$${1:foo} = ${2:true} ? ${3:a} : ${4};

snippet ?:
	${1:true} ? ${2:a} : ${3}

snippet request 
	$request = $this->get('request');

snippet reqget
	$${1:var} = $request->query->get('${1}');

snippet reqpost
	$${1:var} = $request->request->get('${1}');

snippet session
	$session = $this->get('session');

snippet sessionVar
	$${1:var} = $session->get('${1}');
	
snippet /**
	/**
	 * ${1}
	 */

snippet namespace
	namespace `substitute(substitute(substitute(expand("%:p"), '\v(.*\/\l+)((\/\u\w+)+)\/\u\w+.php$', '\2', ''), '\/', '\\\', 'g'), '^\\\', '', '')`;

snippet gotime
	<?php
	/*
	 * For the full copyright and license information, please view the LICENSE
	 * file that was distributed with this source code.
	 */

	namespace ${1:`substitute(substitute(substitute(expand("%:p"), '\v(.*\/\l+)((\/\u\w+)+)\/\u\w+.php$', '\2', ''), '\/', '\\\', 'g'), '^\\\', '', '')`};

	/**
	 * ${1}
	 *
	 * @author Joris de Wit <joris.w.dewit@gmail.com>
	 */
	class ${2:ClassName}
	{
		${3}

		/**
		 * ${4}
		 */
		${5:public} function ${6:__construct}(${7:arguments})
		{
			${8:// code...}
		}
	}

snippet while
	while (${1:/* condition */}) {
		${2:// code...}
	}

snippet dowhile
	do {
		${2:// code... }
	} while (${1:/* condition */});

snippet if
	if (${1:/* condition */}) {
		${2:// code...}
	}
	${3}

snippet ifelse
	if (${1:/* condition */}) {
		${2:// code...}
	} else {
		${3:// code...}
	}
	${4}

snippet else
	else {
		${1:// code...}
	}

snippet elseif
	elseif (${1:/* condition */}) {
		${2:// code...}
	}

snippet switch
	switch ($${1:variable}) {
		case '${2:value}':
			${3:// code...}
			break;
		${5}
		default:
			${4:// code...}
			break;
	}

snippet case
	case '${1:value}':
		${2:// code...}
		break;
	${3}

snippet foreach
	foreach ($${1:variable} as $${2:value}) {
		${3:// code...}
	}

snippet foreachkeyval
	foreach ($${1:variable} as $key => $val) {
		${2:// code...}
	}
	${3}

snippet array
	array('${1}' => ${2})

snippet try
	try {
		${2}
	} catch (${1:\Exception} $e) {
		${3}
	}

snippet rett
	return true;

snippet retf
	return false;
